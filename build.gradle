plugins {
	id 'checkstyle'
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'org.sonarqube' version '3.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
def ENV = System.getenv()

if (ENV.MAVEN_PASSWORD) {
	def versionName = System.getenv("GITHUB_REF")
	versionName = versionName.substring(10)
	if (versionName.startsWith("v")) {
		versionName = versionName.substring(1) //strip "v" in "v1.0.0" etc.
	}
	version = versionName
} else if (ENV.GITHUB_SHA) {
	version = System.getenv("GITHUB_SHA").substring(0, 9)
} else {
	version = 'LOCAL'
}

group = 'net.patchworkmc'
archivesBaseName = 'patchwork-manifest'
repositories {
	mavenCentral()
}
dependencies {
	implementation 'com.electronwill.night-config:toml:3.6.0'

	implementation 'com.google.code.gson:gson:2.8.5'
	implementation 'org.jetbrains:annotations:16.0.1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

checkstyle {
	configFile = rootProject.file("checkstyle.xml")
	toolVersion = '8.25'
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

def runDir = file("run")

if (!runDir.exists() && !runDir.mkdirs()) {
	throw new IOException("Failed to create run directory ${runDir.getAbsolutePath()}")
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			pom {
				name = project.name
				description = project.description
				url = "https://github.com/patchworkmc/patchwork-manifest"
			}

			// add all the jars that should be included when publishing to maven
			afterEvaluate {
				artifact jar
				artifact sourcesJar
			}
		}
	}

	repositories {
		if (ENV.MAVEN_PASSWORD) {
			maven {
				url 'https://maven.patchworkmc.net/releases'
				credentials {
					username "patchworkmc"
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "PatchworkMC_patchwork-manifest"
		property "sonar.organization", "patchworkmc-1"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
