plugins {
	id 'checkstyle'
	id 'application'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.4'
}
sourceCompatibility = 1.8

def ENV = System.getenv()

if (ENV.bintray_user && ENV.bintray_key) {
	def versionName = System.getenv("GITHUB_REF")
	versionName = versionName.substring(10)
	if (versionName.startsWith("v")) {
		versionName = versionName.substring(1) //strip "v" in "v1.0.0" etc.
	}
	version = versionName
} else if (ENV.GITHUB_SHA) {
	version = System.getenv("GITHUB_SHA").substring(0, 9)
} else {
	version = 'LOCAL'
}

group = 'com.patchworkmc'
archivesBaseName = 'patchwork-manifest'
repositories {
	mavenCentral()
}
dependencies {
	implementation 'com.electronwill.night-config:toml:3.6.0'

	implementation 'com.google.code.gson:gson:2.8.5'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId 'com.patchworkmc'
			artifactId "patchwork-manifest"
			version version

			artifact(jar)
			artifact(sourcesJar)
		}
	}
}

application {
	mainClassName "com.patchworkmc.manifest.Main"
}

checkstyle {
	configFile = rootProject.file("checkstyle.xml")
	toolVersion = '8.25'
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

def runDir = file("run")

if (!runDir.exists() && !runDir.mkdirs()) {
	throw new IOException("Failed to create run directory ${runDir.getAbsolutePath()}")
}

run {
	workingDir runDir
}
bintray {
	user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : System.getenv('bintray_user')
	key = project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : System.getenv('bintray_key')
	publish = true
	override = true
	publications = ['mavenJava']
	pkg {
		repo = project.bintrayRepo
		name = project.name
		user = bintray.user
		userOrg = project.repoOwner
		licenses = [project.codeLicense]
		desc = project.description
		websiteUrl = "https://github.com/${project.repoOwner}/${project.repoName}"
		issueTrackerUrl = "https://github.com/${project.repoOwner}/${project.repoName}/issues"
		vcsUrl = "https://github.com/${project.repoOwner}/${project.repoName}.git"
		publicDownloadNumbers = true

		githubRepo = "${project.repoOwner}/${project.repoName}"
		version {
			name = project.version
			released = new Date()
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			pom {
				name = project.name
				description = project.description
				url = "https://github.com/${project.repoOwner}/${project.repoName}"
				licenses {
					license {
						name = project.codeLicense
					}
				}

				scm {
					url = "https://github.com/${project.repoOwner}/${project.repoName}"
				}
			}

			// add all the jars that should be included when publishing to maven
			afterEvaluate {
				artifact jar
				artifact sourcesJar
			}
		}
	}
}
